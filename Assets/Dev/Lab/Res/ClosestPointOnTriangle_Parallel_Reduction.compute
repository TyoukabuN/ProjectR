#pragma kernel CSMain

struct Triangle
{
    float3 a;
    float3 b;
    float3 c;
};

RWStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<float3> triClosestPoints;

RWStructuredBuffer<float3> closestPoint;

RWStructuredBuffer<float4> debugs;


int taskAmount;
float4 checkPoint;
float4x4 local2world;
float3 InvalidFloat3 = float3(999999, 999999, 999999);

groupshared float3 Shared_hitPoint2triPoint[1024];

float3 ClosestPointOnTriangle(float3 p, float3 a, float3 b, float3 c);

[numthreads(1024,1,1)]
void CSMain(uint3 groupThreadID : SV_DispatchThreadID, uint localIndex : SV_GroupIndex, uint3 groupID : SV_GroupID)
{
    uint id = groupThreadID.x;
    
    debugs[groupThreadID.x].x = localIndex;
    debugs[groupThreadID.x].y = groupThreadID.x;
    debugs[groupThreadID.x].z = id;
    debugs[groupThreadID.x].w = groupID.x;

    
    //因为每个模型未必是能被numthreads里定的1024整除
    //比如一个有2148面的模型，2148%1024=100，所有会有一个线程组里只有100个线程是有效的
    //所在Dispatch的时候传了个任务数taskAmount
    //id < taskAmount 让任务数后面id的线程结果不输入
    if (id >= taskAmount)
    {
        //任务数外的线程填一个极远的向量
        Shared_hitPoint2triPoint[localIndex] = float3(999999, 999999, 999999);
    }
    else
    {
        Triangle tri = triangles[id];
        float3 p1 = mul(local2world, float4(tri.a, 1)).xyz;
        float3 p2 = mul(local2world, float4(tri.b, 1)).xyz;
        float3 p3 = mul(local2world, float4(tri.c, 1)).xyz;
    
        float3 triPoint = ClosestPointOnTriangle(checkPoint.xyz, p1, p2, p3);
        triClosestPoints[id] = triPoint;
    
        float dis2hitPoint = distance(triPoint, checkPoint.xyz);
        float3 hitPoint2triPoint = triPoint - checkPoint.xyz;
    
        Shared_hitPoint2triPoint[localIndex] = hitPoint2triPoint;
    }
    
    GroupMemoryBarrierWithGroupSync();
    
    for (uint stride = 512; stride > 0; stride >>= 1)
    {
        if (localIndex < stride)
        {
            if (length(Shared_hitPoint2triPoint[localIndex + stride]) < length(Shared_hitPoint2triPoint[localIndex]))
                Shared_hitPoint2triPoint[localIndex] = Shared_hitPoint2triPoint[localIndex + stride];
        }
        GroupMemoryBarrierWithGroupSync();
    }
    
    if (localIndex == 0)
    {
        closestPoint[groupID.x] = Shared_hitPoint2triPoint[0] + checkPoint.xyz;
    }
}

float3 ClosestPointOnTriangle(float3 p, float3 a, float3 b, float3 c)
{
    // Compute edges and vectors
    float3 ab = b - a;
    float3 ac = c - a;
    float3 ap = p - a;

    // Compute dot products
    float d1 = dot(ab, ap);
    float d2 = dot(ac, ap);

    // Check if P in vertex region outside A
    if (d1 <= 0.0 && d2 <= 0.0)
        return a;

    // Compute vectors and dot products for B
    float3 bp = p - b;
    float d3 = dot(ab, bp);
    float d4 = dot(ac, bp);

    // Check if P in vertex region outside B
    if (d3 >= 0.0 && d4 <= d3)
        return b;

    // Check if P in edge region of AB, if so return projection
    float vc = d1 * d4 - d3 * d2;
    if (vc <= 0.0 && d1 >= 0.0 && d3 <= 0.0)
    {
        float v = d1 / (d1 - d3);
        return a + v * ab;
    }

    // Compute vectors and dot products for C
    float3 cp = p - c;
    float d5 = dot(ab, cp);
    float d6 = dot(ac, cp);

    // Check if P in vertex region outside C
    if (d6 >= 0.0 && d5 <= d6)
        return c;

    // Check if P in edge region of AC, if so return projection
    float vb = d5 * d2 - d1 * d6;
    if (vb <= 0.0 && d2 >= 0.0 && d6 <= 0.0)
    {
        float w = d2 / (d2 - d6);
        return a + w * ac;
    }

    // Check if P in edge region of BC, if so return projection
    float va = d3 * d6 - d5 * d4;
    if (va <= 0.0 && (d4 - d3) >= 0.0 && (d5 - d6) >= 0.0)
    {
        float u = (d4 - d3) / ((d4 - d3) + (d5 - d6));
        return b + u * (c - b);
    }

    // P inside face region. Compute barycentric coordinates (u, v, w)
    float denom = 1.0 / (va + vb + vc);
    float v = vb * denom;
    float w = vc * denom;
    return a + ab * v + ac * w;
}
